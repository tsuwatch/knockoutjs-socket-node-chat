doctype html
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet', href='/stylesheets/bootstrap.css')
  body
    block content
    script(src='/socket.io/socket.io.js')
    script(src='/javascripts/knockout-3.2.0.js')
    script(src='http://code.jquery.com/jquery-1.11.1.js')
    script.
      var socket = io();
      function Message(data) {
        this.nickname = ko.observable(data.nickname);
        this.message = ko.observable(data.message);
      }

      function User(data) {
        this.nickname = ko.observable(data);
      }

      function ChatViewModel() {
        var self = this;

        self.messages = ko.observableArray([]);
        self.message = ko.observable("");

        self.users = ko.observableArray([]);
        self.user = ko.observable("");

        self.submitMessage = function() {
          if (self.message() === "") {
            return;
          }
          socket.emit('message', self.message());
          self.message("");
        };

        self.pushMessage = function(msg) {
          self.messages.push(new Message(msg));
        }

        self.pushUser = function(nickname) {
          self.users.push(new User(nickname));
        }

        self.loadUsers = function(users) {
          $.each(users, function(key ,value) {
            self.pushUser(value);
          });
        }

        self.removeUser = function(nickname) {
          self.users.remove(function(user) { return user.nickname() == nickname });
        }
      }

      var chatModel = new ChatViewModel();
      ko.applyBindings(chatModel);

      socket.on('login', function(users) {
        chatModel.loadUsers(users);
      });

      socket.on('message', function(data) {
        chatModel.pushMessage(data)
      });

      socket.on('new user', function(nickname) {
        chatModel.pushUser(nickname);
      });
      
      socket.on('remove user', function(nickname) {
        chatModel.removeUser(nickname);
      });
